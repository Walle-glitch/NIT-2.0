import os
import discord
import sys
import subprocess
import asyncio
from discord.ext import commands, tasks
from urllib.request import urlopen
import botConfig  # Bot-token and Bot info exists Localy on the server, This Mod contains that info. 
import _Bot_Modul # use this if you want to write functions. 

# Make sure to update this =) We use YY/MM/DD.VERSION-NR
verson_nr = "Current Version is 24/08/18.1"

# Setup for intents
intents = discord.Intents.all()
intents.message_content = True
# The following line makes sure all commands in the server neds to use "./" in fromt of the command
bot = commands.Bot(command_prefix="./", intents=intents)

# The wollowing roles have access to "Sudo commands" 
BOT_ADMIN_ROLE_NAME = "Bot-Master"

# a verification on the server that the bot is alive. 
@bot.event
async def on_ready():
    print(f'Vi har loggat in som {bot.user}')


###########################################_Below this line_##########################################
#############################################_All users_##############################################
###########################################_can run the code_#########################################

#
#           Example for a Simple Command: 
#@bot.command()
#async def NAME_OF_THE_COMMAND(ctx):
#    Reply = 'String Output' 
#    await ctx.send(Reply)  # This sends the reply
#

    
@bot.command()  # UPDATE THIS ONE WHEN YOU ADD A NEW FUNCTION
# Help = h  #
async def h(ctx):
    Reply = 'you can use the following: ./h , ./git , ./hello , ./about ./ping [and a IP if you wish] , ./rfc [number] , ./version for the Bot version.  The role "Bot-Master" can reboot and initiate a "git pull" using ./Reboot'
    await ctx.send(Reply)
# Version Number # 
@bot.command()
async def version(ctx):
    Reply = verson_nr
    await ctx.send(Reply)
# git #
@bot.command()
async def git(ctx):
    Reply = 'https://github.com/Walle-glitch/NIT-2.0.git'
    await ctx.send(Reply)
# hello #
@bot.command()
async def hello(ctx):
    Reply = 'Hello?'
    await ctx.send(Reply)
# Version number # 
@bot.command()
async def about(ctx):
    Reply = 'The NIT-BOT is a for fun bot here on our Diacord, Its Public on github and anyone is free to contribiute to it, ether for fun or another (non malicious) projects. The Server its hosted on is at my home so its behind a normal (NAT Gateway) Contact Walle/Nicklas for more info Use ./git for the link to Github repo'
    await ctx.send(Reply) 
# PING # 
@bot.command()
async def ping(ctx, ip: str = "8.8.8.8"):
    """
    G칬r ett ping-test till en given IP-adress. Om ingen IP-adress anges,
    anv칛nds 8.8.8.8 som standard.
    """
    try:
        # Do the ping Command + a IP addr (If no IP is specified it will default to 8.8.8.8)
        result = subprocess.run(["ping", "-c", "4", ip], capture_output=True, text=True)
        
        # Sends The output of Ping to the server.
        await ctx.send(f"Ping resultat f칬r {ip}:\n```\n{result.stdout}\n```")
    except subprocess.CalledProcessError as e:
        # If somthing goes wrong:
        await ctx.send(f"ERROR:\n```\n{e.stderr}\n```")
# Get an RFC # 
@bot.command()
async def rfc(ctx, rfc_number: str = None):
    """
    H칛mtar och visar information om en RFC baserat p친 nummer.
    
    :param rfc_number: RFC-nummer att h칛mta. Om inget anges, visas ett felmeddelande.
    """
    if rfc_number is None:
        await ctx.send("Fel: Ingen RFC-nummer angivet. V칛nligen ange ett RFC-nummer efter kommandot.")
        return

    try:
        # Konvertera rfc_number till heltal
        rfc_number = int(rfc_number)
        result = _Bot_Modul.get_rfc(rfc_number)
    except ValueError:
        # Hantera fallet d칛r rfc_number inte kan konverteras till heltal
        result = "Fel: Ogiltigt RFC-nummer. V칛nligen ange ett giltigt heltal."

    await ctx.send(result)

# Kommandot f칬r att konfigurera BGP-peering
@bot.command()
async def BGP(ctx, bgp_neighbor_ip: str = "8.8.8.8", bgp_as_number: str = "65000", neighbor_as_number: str = "65001"):
    """
    K칬r kommandot f칬r att konfigurera en BGP-nabo via SSH p친 Cisco-routern.
    
    :param bgp_neighbor_ip: IP-adressen till BGP-nabon (default 8.8.8.8)
    :param bgp_as_number: Ditt lokala AS-nummer (default 65000)
    :param neighbor_as_number: AS-numret f칬r din BGP-nabo (default 65001)
    """
    router_ip = "172.31.255.1"  # Cisco-routerns IP-adress
    
    await ctx.send(f"F칬rs칬ker konfigurera BGP-peering med nabon {bgp_neighbor_ip}...")
    
    # Anropa funktionen f칬r att konfigurera BGP
    result = _Bot_Modul.configure_bgp_neighbor(router_ip, bgp_neighbor_ip, bgp_as_number, neighbor_as_number)
    
    # Skicka tillbaka resultatet till anv칛ndaren
    await ctx.send(result)




###########################################_Below this line_##########################################
###########################################_Work In progress_##########################################

# Rollnamn som ska tilldelas av boten
ROLE_NAME = "YourRoleName"  # 츿ndra detta till din roll som du vill att boten ska tilldela

@bot.command()
async def addrole(ctx):
    """
    Tilldelar en specifik roll till den anv칛ndare som k칬r kommandot.
    Anv칛nder ett inb칛ddat meddelande f칬r att ge feedback.
    """
    role = discord.utils.get(ctx.guild.roles, name=ROLE_NAME)
    
    if role is None:
        await ctx.send(f"Roll '{ROLE_NAME}' kunde inte hittas p친 servern.")
        return

    if role in ctx.author.roles:
        embed = discord.Embed(title="Roll tilldelad", description=f"Du har redan rollen **{ROLE_NAME}**.", color=discord.Color.orange())
    else:
        try:
            await ctx.author.add_roles(role)
            embed = discord.Embed(title="Roll tilldelad", description=f"Rollen **{ROLE_NAME}** har tilldelats dig!", color=discord.Color.green())
        except discord.Forbidden:
            embed = discord.Embed(title="Fel", description="Jag har inte tillr칛ckliga r칛ttigheter f칬r att tilldela denna roll.", color=discord.Color.red())
    
    # Skicka ett inb칛ddat meddelande som svar
    await ctx.send(embed=embed)

@bot.command()
async def removerole(ctx):
    """
    Tar bort en specifik roll fr친n den anv칛ndare som k칬r kommandot.
    Anv칛nder ett inb칛ddat meddelande f칬r att ge feedback.
    """
    role = discord.utils.get(ctx.guild.roles, name=ROLE_NAME)
    
    if role is None:
        await ctx.send(f"Roll '{ROLE_NAME}' kunde inte hittas p친 servern.")
        return

    if role not in ctx.author.roles:
        embed = discord.Embed(title="Roll borttagen", description=f"Du har inte rollen **{ROLE_NAME}**.", color=discord.Color.orange())
    else:
        try:
            await ctx.author.remove_roles(role)
            embed = discord.Embed(title="Roll borttagen", description=f"Rollen **{ROLE_NAME}** har tagits bort fr친n dig.", color=discord.Color.green())
        except discord.Forbidden:
            embed = discord.Embed(title="Fel", description="Jag har inte tillr칛ckliga r칛ttigheter f칬r att ta bort denna roll.", color=discord.Color.red())
    
    # Skicka ett inb칛ddat meddelande som svar
    await ctx.send(embed=embed)

###########################################_Below this line_##########################################
###########################################_Only Admin Code_##########################################

# Command does a `git pull` reboots the bot (only the role "Bot-Master")
@bot.command(name="Reboot")
@commands.has_role(BOT_ADMIN_ROLE_NAME)  # Verify that the user has the correct role
async def reboot(ctx):
    await ctx.send("K칬r `git pull` och startar om boten...")

    # Executes "git pull" directory
    try:
        result = subprocess.run(["git", "pull"], capture_output=True, text=True, check=True)
        await ctx.send(f"`git pull` utf칬rd:\n```\n{result.stdout}\n```")
    except subprocess.CalledProcessError as e:
        await ctx.send(f"Fel vid `git pull`:\n```\n{e.stderr}\n```")
        return

    # Saves current Python."exe" file 
    python = sys.executable

    # Reboots the Python Script 
    os.execl(python, python, *sys.argv)

# Manages Errors if a none "Bot-Master" tries the command.
@reboot.error
async def reboot_error(ctx, error):
    if isinstance(error, commands.MissingRole):
        await ctx.send("Du har inte beh칬righet att anv칛nda detta kommando.")


# Roll-ID:n f칬r roller som ska tilldelas
ROLE_EMOJI_MAP = {
    "游릭": "Role1_ID",  # Gr칬n emoji motsvarar roll 1
    "游댯": "Role2_ID",  # Bl친 emoji motsvarar roll 2
    "游댮": "Role3_ID",  # R칬d emoji motsvarar roll 3
}

# Kommandot f칬r att skapa ett inb칛ddat meddelande med reaktionsroller
@bot.command()
@commands.has_permissions(administrator=True)  # Endast administrat칬rer kan k칬ra detta kommando
async def setup_roles(ctx):
    """
    Skapar ett inb칛ddat meddelande f칬r rolltilldelning via reaktioner.
    """
    embed = discord.Embed(
        title="V칛lj din roll!",
        description="Reagera med en emoji f칬r att f친 motsvarande roll:\n\n"
                    "游릭 - Gr칬n Roll\n"
                    "游댯 - Bl친 Roll\n"
                    "游댮 - R칬d Roll\n",
        color=discord.Color.blue()
    )
    embed.set_footer(text="Klicka p친 en emoji f칬r att f친 en roll tilldelad.")
    
    # Skicka det inb칛ddade meddelandet
    message = await ctx.send(embed=embed)
    
    # L칛gg till reaktionerna (emoji) till meddelandet
    for emoji in ROLE_EMOJI_MAP.keys():
        await message.add_reaction(emoji)

# Event f칬r att lyssna p친 reaktioner och tilldela roller
@bot.event
async def on_raw_reaction_add(payload):
    """
    Event som hanterar rolltilldelning n칛r en anv칛ndare reagerar p친 ett meddelande.
    """
    if payload.message_id == MESSAGE_ID:  # Byt ut detta mot meddelande-ID f칬r ditt inb칛ddade meddelande
        guild = bot.get_guild(payload.guild_id)
        role_id = ROLE_EMOJI_MAP.get(str(payload.emoji))
        
        if role_id:
            role = guild.get_role(int(role_id))
            member = guild.get_member(payload.user_id)
            
            if role and member:
                await member.add_roles(role)
                try:
                    await member.send(f"Du har tilldelats rollen: {role.name}")
                except discord.Forbidden:
                    pass  # Ignorera om anv칛ndaren har st칛ngt av direktmeddelanden

# Event f칬r att hantera borttagning av roller n칛r en anv칛ndare tar bort sin reaktion
@bot.event
async def on_raw_reaction_remove(payload):
    """
    Event som hanterar borttagning av roller n칛r en anv칛ndare tar bort sin reaktion.
    """
    if payload.message_id == MESSAGE_ID:  # Byt ut detta mot meddelande-ID f칬r ditt inb칛ddade meddelande
        guild = bot.get_guild(payload.guild_id)
        role_id = ROLE_EMOJI_MAP.get(str(payload.emoji))
        
        if role_id:
            role = guild.get_role(int(role_id))
            member = guild.get_member(payload.user_id)
            
            if role and member:
                await member.remove_roles(role)
                try:
                    await member.send(f"Rollen {role.name} har tagits bort fr친n dig.")
                except discord.Forbidden:
                    pass  # Ignorera om anv칛ndaren har st칛ngt av direktmeddelanden

# Exe the bot using its token. 
bot.run(botConfig._Bot_Token())

